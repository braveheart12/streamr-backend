swagger: '2.0'
info:
  title: Streamr API
  # description: Streamr API
  version: 1.0.0
host: www.streamr.com
schemes:
  - https
host: streamr.com
basePath: /api/v1
produces:
  - application/json

securityDefinitions:
  token:
    type: apiKey
    name: Authorization
    in: header
    
security:
  - token: []
  
tags:
  - name: Stream
    description: Streams
  - name: Canvas
    description: Saved canvases in your archive
  - name: Live
    description: Running canvases
paths:
  /streams:
    get:
      summary: List streams
      description: |
        Lists the streams available to the user.
      parameters:
        - name: name
          in: query
          description: Filter results by stream name.
          required: false
          type: string
      tags:
        - Stream
      responses:
        '200':
          description: An array of streams
          schema:
            type: array
            items:
              $ref: '#/definitions/Stream'
        # TODO: error codes              
    post:
      summary: Create a new stream
      description: |
        Creates a new stream.
      parameters:
        - name: body
          in: body
          description: Stream object
          required: true
          schema:
            $ref: '#/definitions/StreamCreateRequest'
      tags:
        - Stream
      responses:
        '200':
          description: The stream that was created
          schema:
            $ref: '#/definitions/Stream'
        # TODO: error codes
  
  /streams/{id}:
    get:
      summary: Get stream by id
      description: Returns a stream by id
      tags:
        - Stream
      parameters:
        - in: path
          name: id
          description: ID of the stream to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Stream'
        # TODO: error codes
    put:
      summary: Update a stream
      description: Updates a stream. The *id* and *auth* fields can not be updated.
      tags:
        - Stream
      parameters:
        - in: path
          name: id
          description: ID of the stream to be updated
          required: true
          type: string
        - name: body
          in: body
          description: Stream object
          required: true
          schema:
            $ref: '#/definitions/Stream'
      responses:
        '204':
          description: Success (no content)
        # TODO: error codes
    delete:
      summary: Delete a stream
      description: Deletes a stream by id. This will also delete all data for this stream. Use with caution!
      tags:
        - Stream
      parameters:
        - in: path
          name: id
          description: ID of the stream to be deleted
          required: true
          type: string
      responses:
        '204':
          description: Success (no content)
        # TODO: error codes
          
  /canvases:
    get:
      summary: List saved canvases
      description: Lists saved canvases in your archive.
      tags:
        - Canvas
      parameters:
        - name: name
          in: query
          description: Filter results by canvas name.
          required: false
          type: string
      responses:
        '200':
          description: An array of canvases
          schema:
            type: array
            items:
              $ref: '#/definitions/Canvas'
        # TODO: error codes
    post:
      summary: Create a canvas
      description: Creates a new canvas into your archive.
      tags:
        - Canvas
      parameters:
        - name: body
          in: body
          description: Canvas object
          required: true
          schema:
            $ref: '#/definitions/Canvas'
      responses:
        '200':
          description: The canvas that was created
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes

  /canvases/{id}:
    get:
      summary: Get canvas by id
      description: Returns a canvas by id
      tags:
        - Canvas
      parameters:
        - in: path
          name: id
          description: ID of the canvas to be fetched
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes
    put:
      summary: Update a canvas.
      description: Updates a canvas. The *id* field can not be updated.
      tags:
        - Canvas
      parameters:
        - in: path
          name: id
          description: ID of the canvas to be updated
          required: true
          type: string
        - name: body
          in: body
          description: Canvas object
          required: true
          schema:
            $ref: '#/definitions/Canvas'
      responses:
        '204':
          description: Success (no content)
        # TODO: error codes
    delete:
      summary: Delete a canvas
      description: Deletes a canvas by id
      tags:
        - Canvas
      parameters:
        - in: path
          name: id
          description: ID of the canvas to be deleted
          required: true
          type: integer
      responses:
        '204':
          description: Success (no content)
        # TODO: error codes
            

  /live:
    get:
      summary: List live canvases
      description: |
        Lists live canvases.
      tags:
        - Live
      parameters:
        - name: state
          in: query
          description: Filter results by state.
          required: false
          type: string
          enum: [running, stopped]
        - name: name
          in: query
          description: Filter results by canvas name.
          required: false
          type: string
      responses:
        '200':
          description: An array of canvases
          schema:
            type: array
            items:
              $ref: '#/definitions/Canvas'
        # TODO: error codes
    post:
      summary: Create and start a new live canvas
      description: |
        Create and start a new live canvas.
      parameters:
        - name: body
          in: body
          description: Canvas object
          required: true
          schema:
            $ref: '#/definitions/Canvas'
      tags:
        - Live
      responses:
        '200':
          description: The canvas that was started
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes

  /live/{id}:
    get:
      summary: Get live canvas by id
      description: Returns a live canvas by id
      tags:
        - Live
      parameters:
        - in: path
          name: id
          description: ID of the live canvas to be fetched
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes
    delete:
      summary: Delete a live canvas
      description: Delete a live canvas. The canvas must be in stopped state.
      parameters:
        - in: path
          name: id
          description: ID of the live canvas to be deleted
          required: true
          type: integer
      tags:
        - Live
      responses:
        '204':
          description: Success
        # TODO: error codes
            
  /live/{id}/resume:
    post:
      summary: Resumes a stopped live canvas
      description: Resumes a live canvas that is currently stopped.
      tags:
        - Live
      parameters:
        - in: path
          name: id
          description: ID of the live canvas to be resumed
          required: true
          type: integer
        - name: body
          in: body
          description: Resume request object
          required: true
          schema:
            $ref: '#/definitions/ResumeRequest'
          
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes
        
  /live/{id}/stop:
    post:
      summary: Stop a live canvas
      description: Stops a live canvas that is currently running.
      tags:
        - Live
      parameters:
        - in: path
          name: id
          description: ID of the live canvas to be fetched
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Canvas'
        # TODO: error codes

definitions:
  Stream:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for this stream.
      name:
        type: string
        description: Name of this stream.
      description:
        type: string
        description: Description of this stream.
      auth:
        type: string
        description: Auth key needed to produce data to this stream.
      streamConfig:
        $ref: '#/definitions/StreamConfig'
        description: Stream configuration
  
  StreamCreateRequest:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Name of this stream.
        example: 'My stream'
      description:
        type: string
        description: Description of this stream.
        example: 'My stream description'
      streamConfig:
        $ref: '#/definitions/StreamConfig'
        description: Stream configuration
  
  StreamConfig:
    type: object
    properties:
      fields:
        type: array
        default: []
        description: An array containing field definitions for this stream.
        items:
          $ref: '#/definitions/FieldDefinition'
  
  FieldDefinition:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
        description: name of the fieldf
      type:
        type: string
        description: type of the field
        enum: [number, string, boolean, list, map]

  Canvas:
    type: object
    required:
      - name
      - modules
    properties:
      name:
        type: string
        example: My canvas
      modules:
        type: array
        items:
          $ref: '#/definitions/Module'
      settings:
        $ref: '#/definitions/CanvasSettings'

  CanvasSettings:
    type: object
    
  Module:
    type: object
    
  ResumeRequest:
    type: object
    properties:
      loadState:
        type: boolean
        default: true
        example: true
        description: If true, an attempt to load a saved state will be made. If false, the canvas will start with initial state.

  Error:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: A message describing the error
    